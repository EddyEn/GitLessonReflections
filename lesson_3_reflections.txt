- When would you want to use a remote repository rather than keeping all your work
local?

    When I want to share my work with others, access my work from other places or computers and do the backup.


- Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I might want some to get updates and work on some branches, not all of them. When working on specific features
with many people on the same project. You migh need to concentrate on what you are working on, not on others' works.
So manuanlly pull allows you to select specific branches to pull.

- Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Using folk is when you want to clone a repository from GitHub to you GitHub. Using Clones is when you want to
clone a repository from both local and remote to your local repository. Using Branches is when you want to create
a brance within a repository in a local machine.

- What is the benefit of having a copy of the last known state of the remote
stored locally?

    The benefit is that when there is a conflict such as changes happen to both files in remote and local, the original
is used for comparing can manual merging. Anather benefit could be that when being away from internet connection and
working offline, the last known state of remote tells what changes are.

- How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without using git or github, collaboration would be sharing file on the cloud, create another file for a proposal,
 and send the proposal to relevant people to approve. The hard part of doing that would be syncing changes between
 file versions. However, the easy part would be less memoring git commands.

- When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Changes in separate branch do not affect master branch which is an official version that should always works. This
allows developer to explore and try new features and idea, without being woried that the changes will damage the
working version.
